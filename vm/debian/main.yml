---
- name: init. vm provisioning
  hosts: all
  vars:
    ansible_user: debian
    ansible_become_method: sudo
  gather_facts: no
  tasks:
    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost

    - name: remove previous SSH key
      ansible.builtin.raw: ssh-keygen -f ~/.ssh/known_hosts -R {{Â inventory_hostname }}
      delegate_to: localhost
      register: key_removal
      changed_when: "'not found in' not in key_removal.stderr"

    - name: allow new SSH key
      ansible.builtin.raw: ssh-keyscan -H {{ inventory_hostname }} | grep ed25519 >> ~/.ssh/known_hosts
      delegate_to: localhost

    - name: root operations
      become: true
      block:
        - name: disable SSH password authentication
          ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

        - name: restarting OpenSSH
          ansible.builtin.raw: systemctl restart ssh.service

        - name: set root SSH key
          ansible.builtin.raw: cp /home/debian/.ssh/authorized_keys /root/.ssh/authorized_keys


- name: root operations
  hosts: all
  vars:
    ansible_user: root
  gather_facts: no
  tasks:
    - name: remove debian user
      ansible.builtin.raw: |
        deluser debian;
        rm -rf /home/*;

    - name: update index of available package(s)
      ansible.builtin.raw: apt-get update

    - name: check package(s) upgrade(s)
      ansible.builtin.raw: apt-get -s upgrade | grep '^Inst ' | cat
      changed_when: upd_output.stdout.splitlines()|length > 0
      register: upd_output

    - name: check dist-upgrade(s)
      ansible.builtin.raw: apt-get -s dist-upgrade | grep '^Inst ' | cat
      changed_when: upgd_output.stdout.splitlines()|length > 0
      register: upgd_output

    - name: package(s) to be updated
      ansible.builtin.debug:
        msg: "{{ upd_output.stdout_lines }}"
      changed_when: false
      when: upd_output.stdout.splitlines()|length > 0

    - name: package(s) to be upgraded
      ansible.builtin.debug:
        msg: "{{ upgd_output.stdout_lines }}"
      changed_when: false
      when: upgd_output.stdout.splitlines()|length > 0

    - name: upgrading
      ansible.builtin.raw: apt upgrade -y
      when: (upd_output.stdout.splitlines()|length > 0) or
            (upgd_output.stdout.splitlines()|length > 0)

    - name: force reboot
      ansible.builtin.raw: reboot
      poll: 0
      ignore_errors: yes

    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost
      become: false

    - name: install tools
      ansible.builtin.raw: apt install -y htop
