---
- name: install-git
  hosts: all
  gather_facts: no
  tasks:
    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost

    - name: remove previous SSH key
      ansible.builtin.raw: ssh-keygen -f ~/.ssh/known_hosts -R {{Â inventory_hostname }}
      delegate_to: localhost
      register: key_removal
      changed_when: "'not found in' not in key_removal.stderr"

    - name: allow new SSH key
      ansible.builtin.raw: ssh-keyscan -H {{ inventory_hostname }} | grep ed25519 >> ~/.ssh/known_hosts
      delegate_to: localhost

    - name: disable SSH password authentication
      ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

    - name: restarting OpenSSH
      ansible.builtin.raw: rc-service sshd restart

    - name: update index of available package(s)
      ansible.builtin.raw: apk update

    - name: check package(s) update(s)
      ansible.builtin.raw: apk version -l '<'
      changed_when: pkgs_output.stdout.splitlines()|length > 1
      failed_when: pkgs_output.stdout.splitlines()|length == 0
      register: pkgs_output

    - name: upgrading {{ pkgs_output.stdout.splitlines()|length - 1 }} package(s)
      ansible.builtin.raw: apk upgrade
      when: pkgs_output.stdout.splitlines()|length > 1

    - name: check if reboot needed
      ansible.builtin.raw: lsof / 2>&1 | awk '$3=="(deleted)"' | cat
      register: lsof_output

    - name: reboot
      ansible.builtin.raw: reboot
      poll: 0
      ignore_errors: yes
      when: lsof_output.stdout.splitlines()|length > 0

    - name: waiting for {{ inventory_hostname }} to be ready
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 5
        timeout: 60
      delegate_to: localhost
      when: lsof_output.stdout.splitlines()|length > 0

    - name: set timezone
      block:
        - name: install tzdata
          ansible.builtin.raw: apk add tzdata

        - name: timezone symlink
          ansible.builtin.raw: ln -s /usr/share/zoneinfo/{{ timezone }} /etc/localtime

    - name: install stuff
      block:
      - name: install cgit
        ansible.builtin.raw: apk add cgit

      - name: install nginx
        ansible.builtin.raw: apk add nginx

      - name: install gitolite
        ansible.builtin.raw: apk add gitolite

      - name: add git-daemon for smart http
        ansible.builtin.raw: apk add git-daemon

      - name: install uwsgi and plugins
        ansible.builtin.raw: apk add uwsgi uwsgi-cgi

      - name: install highlight
        ansible.builtin.raw: apk add highlight

      - name: install markdown
        ansible.builtin.raw: apk add markdown


    - name: cgit config
      block:
      - name: send cgitrc configuration
        ansible.builtin.raw: scp cgitrc {{ ansible_user }}@{{ inventory_hostname }}:/etc/cgitrc
        delegate_to: localhost
        changed_when: false

      - name: cgitrc - update clone url
        ansible.builtin.raw: sed -i -e 's/ANSIBLE_HOST/{{ inventory_hostname }}/g' /etc/cgitrc

      - name: cgitrc - fix chmod and permissions
        ansible.builtin.raw: |
          chmod 0600 /etc/cgitrc;
          chown nginx:nginx /etc/cgitrc;

      - name: cgitrc - add markdown.sh script
        ansible.builtin.raw: |
          echo -e '#!/bin/sh\nif echo "$1" | grep -qi '\.md$'; then\n  markdown -\nelse\n  cat -\nfi' > /usr/lib/cgit/filters/markdown.sh
          chmod 0755 /usr/lib/cgit/filters/markdown.sh;


    - name: nginx
      block:
      - name: send nginx configuration
        ansible.builtin.raw: scp nginx.conf {{ ansible_user }}@{{ inventory_hostname }}:/etc/nginx/nginx.conf
        delegate_to: localhost
        changed_when: false

      - name: add nginx to git group
        ansible.builtin.raw: addgroup nginx git

      - name: all directories are safe
        ansible.builtin.raw: |
          rm -f /var/lib/nginx/.gitconfig;
          su nginx -s /bin/sh -c "git config --global --add safe.directory '*'"


    - name: git config
      block:
      - name: random git password
        ansible.builtin.raw: echo git:$(tr -dc a-z0-9 </dev/urandom | head -c64) | chpasswd -e

      - name: add GIT public key
        ansible.builtin.raw: echo "{{ git_pubkey }}" > /var/lib/git/git.pub

      - name: setup gitolite
        ansible.builtin.raw: su git -c "gitolite setup -pk /var/lib/git/git.pub"

      - name: change permissions
        ansible.builtin.raw: |
          chmod g+rX /var/lib/git;
          chmod -R g+rX /var/lib/git/repositories;

      - name: change UMASK
        ansible.builtin.raw: sed -i -e 's/0077/0027/g' /var/lib/git/.gitolite.rc

      - name: add git command for automatic branch detection
        ansible.builtin.raw: sed -i -e "/'writable',/a \            'symbolic-ref'," /var/lib/git/.gitolite.rc

      - name: enable server local_code
        ansible.builtin.raw: sed -i -e '1,/LOCAL_CODE/s/# LOCAL_CODE/LOCAL_CODE/g' /var/lib/git/.gitolite.rc

      - name: add post_git command
        ansible.builtin.raw: sed -i -e "/  LOCAL_CODE  /a \\\n        POST_GIT => [\\n            'auto-default-branch',\\n        ]," /var/lib/git/.gitolite.rc

      - name: create local triggers directory
        ansible.builtin.raw: su git -c "mkdir -p ~/local/triggers/"

      - name: send auto-default-branch
        ansible.builtin.raw: scp auto-default-branch {{ ansible_user }}@{{ inventory_hostname }}:/var/lib/git/local/triggers/auto-default-branch
        delegate_to: localhost
        changed_when: false

      - name: fix owners
        ansible.builtin.raw: chown -R git:git /var/lib/git/local/

      - name: fix chmod
        ansible.builtin.raw: chmod 0744 /var/lib/git/local/triggers/auto-default-branch

      - name: remove testing.git repo
        ansible.builtin.raw: rm -rf /var/lib/git/repositories/testing.git/

      - name: gitolite admin setup
        delegate_to: localhost
        ansible.builtin.raw: |
          rm -rf ./gitolite;
          GIT_SSH_COMMAND='ssh -i {{ git_private_key_file }} -o IdentitiesOnly=yes' git clone git@{{ inventory_hostname }}:gitolite-admin ./gitolite;
          sed -i -e '2,/repo testing/d' ./gitolite/conf/gitolite.conf
          git -C ./gitolite/ -c user.name='ansible' -c user.email='ansible@local' commit -am "Removed : testing repository";

          for repo in ansible docker esp32 tofu; do
            echo "\nrepo $repo\n    RW+     =   git" >> ./gitolite/conf/gitolite.conf;
            git -C ./gitolite/ -c user.name='ansible' -c user.email='ansible@local' commit -am "Added : $repo repository";
          done

          GIT_SSH_COMMAND='ssh -i {{ git_private_key_file }} -o IdentitiesOnly=yes' git -C ./gitolite/ push;
          rm -rf gitolite;

      - name: ignore gitolite-admin.git repo
        ansible.builtin.raw: su - git -c "echo 'ignore=1' > /var/lib/git/repositories/gitolite-admin.git/cgitrc"

      - name: send highlighting.sh
        ansible.builtin.raw: scp highlighting.sh {{ ansible_user }}@{{ inventory_hostname }}:/usr/lib/cgit/filters/highlighting.sh
        delegate_to: localhost
        changed_when: false

      - name: highlighting.sh - change chmod
        ansible.builtin.raw: chmod 0755 /usr/lib/cgit/filters/highlighting.sh


    - name: uWSGI config
      block:
      - name: send cgit.ini configuration
        ansible.builtin.raw: scp cgit.ini {{ ansible_user }}@{{ inventory_hostname }}:/etc/uwsgi/conf.d/cgit.ini
        delegate_to: localhost
        changed_when: false

      - name: send http.ini configuration
        ansible.builtin.raw: scp http.ini {{ ansible_user }}@{{ inventory_hostname }}:/etc/uwsgi/conf.d/http.ini
        delegate_to: localhost
        changed_when: false

      - name: configure uwsgi.git users
        ansible.builtin.raw: echo -e "user=nginx\ngroup=nginx" > /etc/conf.d/uwsgi.cgit

      - name: configure uwsgi.http users
        ansible.builtin.raw: echo -e "user=nginx\ngroup=nginx" > /etc/conf.d/uwsgi.http

      - name: create uwsgi.cgit symlinks
        ansible.builtin.raw: ln -s /etc/init.d/uwsgi /etc/init.d/uwsgi.cgit

      - name: create uwsgi.http symlinks
        ansible.builtin.raw: ln -s /etc/init.d/uwsgi /etc/init.d/uwsgi.http


    - name: cgit - fix idle column
      block:
      - name: send fix-git-idle script
        ansible.builtin.raw: scp fix-git-idle {{ ansible_user }}@{{ inventory_hostname }}:/etc/periodic/daily/fix-git-idle
        delegate_to: localhost
        changed_when: false

      - name: chmod fix-git-idle
        ansible.builtin.raw: chmod 0700 /etc/periodic/daily/fix-git-idle


    - name: restart and runlevels
      block:
      - name: restarting nginx
        ansible.builtin.raw: rc-service nginx restart

      - name: nginx on default runlevel
        ansible.builtin.raw: rc-update add nginx default

      - name: restarting uwsgi.cgit
        ansible.builtin.raw: rc-service uwsgi.cgit restart

      - name: uwsgi.cgit on default runlevel
        ansible.builtin.raw: rc-update add uwsgi.cgit default

      - name: restarting uwsgi.http
        ansible.builtin.raw: rc-service uwsgi.http restart

      - name: uwsgi.http on default runlevel
        ansible.builtin.raw: rc-update add uwsgi.http default
