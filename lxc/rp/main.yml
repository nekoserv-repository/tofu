---
- name: install and configure reverse-proxy
  hosts: all
  gather_facts: no
  tasks:
    - name: prepare host
      block:
        - name: waiting for {{ inventory_hostname }} to be ready
          wait_for:
            host: "{{ inventory_hostname }}"
            port: 22
            state: started
            delay: 5
            timeout: 60
          delegate_to: localhost

        - name: remove previous SSH key
          ansible.builtin.raw: ssh-keygen -f ~/.ssh/known_hosts -R {{Â inventory_hostname }}
          delegate_to: localhost
          register: key_removal
          changed_when: "'not found in' not in key_removal.stderr"

        - name: allow new SSH key
          ansible.builtin.raw: ssh-keyscan -H {{ inventory_hostname }} | grep ed25519 >> ~/.ssh/known_hosts
          delegate_to: localhost

        - name: disable SSH password authentication
          ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

        - name: restarting OpenSSH
          ansible.builtin.raw: rc-service sshd restart

        - name: disable router advertisements
          ansible.builtin.raw: grep -q accept_ra /etc/network/interfaces || echo "        pre-up echo 0 > /proc/sys/net/ipv6/conf/eth0/accept_ra" >> /etc/network/interfaces

        - name: networking restart
          ansible.builtin.raw: rc-service networking restart

        - name: update index of available package(s)
          ansible.builtin.raw: apk update

        - name: check package(s) update(s)
          ansible.builtin.raw: apk version -l '<'
          changed_when: pkgs_output.stdout.splitlines()|length > 1
          failed_when: pkgs_output.stdout.splitlines()|length == 0
          register: pkgs_output

        - name: upgrading {{ pkgs_output.stdout.splitlines()|length - 1 }} package(s)
          ansible.builtin.raw: apk upgrade
          when: pkgs_output.stdout.splitlines()|length > 1

        - name: check if reboot needed
          ansible.builtin.raw: lsof / 2>&1 | awk '$3=="(deleted)"' | cat
          register: lsof_output

        - name: reboot
          ansible.builtin.raw: reboot
          poll: 0
          ignore_errors: yes
          when: lsof_output.stdout.splitlines()|length > 0

        - name: waiting for {{ inventory_hostname }} to be ready
          wait_for:
            host: "{{ inventory_hostname }}"
            port: 22
            state: started
            delay: 5
            timeout: 60
          delegate_to: localhost
          when: lsof_output.stdout.splitlines()|length > 0


    - name: set timezone
      block:
        - name: install tzdata
          ansible.builtin.raw: apk add tzdata

        - name: timezone symlink
          ansible.builtin.raw: rm -f /etc/localtime && ln -s /usr/share/zoneinfo/{{ timezone }} /etc/localtime


    - name: install lego stuff
      block:
        - name: install lego
          ansible.builtin.raw: apk add lego


    - name: install nginx stuff
      block:
        - name: add edge repo
          ansible.builtin.raw: |
            sed -i -e '/^@/d' /etc/apk/repositories;
            echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories

        - name: install nginx
          ansible.builtin.raw: apk add nginx@edge

        - name: install nginx-mod-http-headers-more
          ansible.builtin.raw: apk add nginx-mod-http-headers-more@edge

        - name: create letsencrypt directory
          ansible.builtin.raw: rm -rf /etc/nginx/ssl/ && mkdir -m 0600 /etc/nginx/ssl/

        - name: remove nginx.conf and defaut.conf
          ansible.builtin.raw: rm -f /etc/nginx/http.d/default.conf /etc/nginx/nginx.conf

        - name: remove nginx cgi stuff
          ansible.builtin.raw: rm -f /etc/nginx/*cgi* /etc/nginx/*sgi*


    - name: firewall stuff
      block:
        - name: install firewall
          ansible.builtin.raw: apk add nftables

        - name: remove default firewall configuration
          ansible.builtin.raw: rm -rf /etc/nftables*


    - name: generate ~/.lego/ directory structure
      ansible.builtin.raw: |
        rm -rf ~/.lego/;
        mkdir -p ~/.lego/accounts/{{ lego_server }}/{{ lego_email }}/keys/;
        mkdir -p ~/.lego/certificates/;


    - name: templating stuff
      block:
        - name: install python3 for templating
          ansible.builtin.raw: apk add --no-cache python3

        - name: send nftables.nft
          ansible.builtin.copy:
            src: "nftables.nft"
            dest: "/etc/nftables.nft"
            mode: 0600
            owner: root
            group: root

        - name: generate renew script
          ansible.builtin.template:
            src: "lerenew.sh.j2"
            dest: "/usr/local/bin/lerenew.sh"
            mode: 0700
            owner: root
            group: root

        - name: generate account.json
          ansible.builtin.template:
            src: "account.json.j2"
            dest: "~/.lego/accounts/{{ lego_server }}/{{ lego_email }}/account.json"
            mode: 0700
            owner: root
            group: root

        - name: generate account key
          ansible.builtin.copy:
            content: "{{ lego_acct_key }}"
            dest: "~/.lego/accounts/{{ lego_server }}/{{ lego_email }}/keys/{{ lego_email }}.key"
            mode: 0600
            owner: root
            group: root

        - name: generate certificate key
          ansible.builtin.copy:
            content: "{{ lego_crt_key }}"
            dest: "~/.lego/certificates/_.{{ lego_domain  }}.key"
            mode: 0600
            owner: root
            group: root

        - name: nginx - nginx.conf
          ansible.builtin.copy:
            src: "nginx.conf"
            dest: "/etc/nginx/nginx.conf"
            mode: 0600
            owner: root
            group: root

        - name: nginx - default.conf
          ansible.builtin.copy:
            src: "nginx-default.conf"
            dest: "/etc/nginx/http.d/default.conf"
            mode: 0600
            owner: root
            group: root

        - name: nginx - status.map
          ansible.builtin.copy:
            src: "nginx-status.map"
            dest: "/etc/nginx/http.d/status.map"
            mode: 0600
            owner: root
            group: root

        - name: generate nginx - proxy.conf
          ansible.builtin.template:
            src: "nginx-proxy.conf.j2"
            dest: "/etc/nginx/http.d/proxy.conf"
            mode: 0600
            owner: root
            group: root

        - name: generate nginx - proxy.map
          ansible.builtin.template:
            src: "nginx-proxy.map.j2"
            dest: "/etc/nginx/http.d/proxy.map"
            mode: 0600
            owner: root
            group: root

        - name: enforce ~/.lego/ permissions
          ansible.builtin.raw: |
            chown -R root:root ~/.lego/
            find ~/.lego/ -type d -exec chmod 0700 {} \;
            find ~/.lego/ -type f -exec chmod 0600 {} \;

        - name: remove python3
          ansible.builtin.raw: apk del python3


    - name: generate certificates
      ansible.builtin.raw: lerenew.sh


    - name: register services
      block:
        - name: enable firewall on boot
          ansible.builtin.raw: rc-update add nftables boot

        - name: enable nginx on boot
          ansible.builtin.raw: rc-update add nginx default


    - name: start services
      block:
        - name: start firewall
          ansible.builtin.raw: rc-service nftables restart

        - name: start nginx
          ansible.builtin.raw: rc-service nginx restart

